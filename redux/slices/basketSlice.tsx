// basketSlice.ts

import { createSlice, PayloadAction } from "@reduxjs/toolkit";

// Define the initial state interface
interface BasketState {
  items: Item[];
}

// Define the item interface
interface Item {
  id: number;
  name: string;
  price: number;
  short_description: string;
  image: string;
}

const initialState: BasketState = {
  items: [],
};

export const basketSlice = createSlice({
  name: "basket",
  initialState,
  reducers: {
    addToBasket: (state, action: PayloadAction<Item>) => {
      state.items.push(action.payload);
    },
    removeFromBasket: (state, action: PayloadAction<number>) => {
      const index = state.items.findIndex((item) => item.id === action.payload);

      if (index !== -1) {
        state.items.splice(index, 1);
      } else {
        console.warn(
          `Can't remove product (id: ${action.payload}) as it's not in the basket!`
        );
      }
    },
  },
});

// Define a selector function to select items by ID
export const selectBasketItemsWithId = (
  state: { basket: BasketState },
  id: number
) => state.basket.items.filter((item) => item.id === id);

// Export action creators generated by createSlice
export const { addToBasket, removeFromBasket } = basketSlice.actions;

// Export selectors using arrow functions
export const selectBasketItems = (state: { basket: BasketState }) =>
  state.basket.items;

export const selectBasketTotal = (state: { basket: BasketState }) =>
  state.basket.items.reduce((total, item) => total + item.price, 0);

export default basketSlice.reducer;
